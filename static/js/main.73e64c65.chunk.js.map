{"version":3,"sources":["components/Draggable.js","components/PPTEditor.js","components/PPTViewer.js","App.js","serviceWorker.js","index.js"],"names":["DraggableContainer","styled","div","Draggable","children","relativeEl","onPositionSet","el","useRef","useEffect","mousedown$","fromEvent","current","mousemove$","document","mouseup$","subscription","pipe","switchMap","start","map","move","preventDefault","left","clientX","offsetX","offsetWidth","top","clientY","offsetY","offsetTop","takeUntil","subscribe","val","style","unsubscribe","ref","Root","Left","Right","PPTEditor","setData","useState","file","setFile","boxes","setBoxes","imagePreviewEl","handleBoxCreate","type","handlePositionSet","index","temp","onChange","e","URL","createObjectURL","target","files","onClick","pptWidth","pptHeight","offsetHeight","position","maxWidth","minWidth","alt","src","width","box","key","Position","props","PPTViewer","data","console","log","leftRelative","topRelative","App","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73e64c65.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport { fromEvent } from 'rxjs'\nimport { map, takeUntil, switchMap } from 'rxjs/operators'\nimport styled from 'styled-components'\n\nconst DraggableContainer = styled.div`\n  position: absolute;\n`\n\nconst Draggable = ({ children, relativeEl, onPositionSet }) => {\n  const el = useRef(null)\n\n  useEffect(() => {\n    const mousedown$ = fromEvent(el.current, 'mousedown')\n    const mousemove$ = fromEvent(document, 'mousemove')\n    const mouseup$ = fromEvent(document, 'mouseup')\n\n    const drag$ = mousedown$.pipe(\n      switchMap((start) => {\n        return mousemove$.pipe(\n          map((move) => {\n            move.preventDefault()\n            return {\n              left:\n                move.clientX - start.offsetX - relativeEl.current.offsetWidth,\n              top: move.clientY - start.offsetY - relativeEl.current.offsetTop,\n            }\n          }),\n          takeUntil(mouseup$)\n        )\n      })\n    )\n\n    const subscription = drag$.subscribe((val) => {\n      const { left, top } = val\n      el.current.style.top = `${top}px`\n      el.current.style.left = `${left}px`\n      onPositionSet(left, top)\n    })\n\n    return () => subscription.unsubscribe()\n  }, [relativeEl, el, onPositionSet])\n\n  return <DraggableContainer ref={el}>{children}</DraggableContainer>\n}\n\nexport default Draggable\n","import React, { useState, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport Draggable from './Draggable'\n\nconst Root = styled.div`\n  width: 100%;\n  display: flex;\n`\n\nconst Left = styled.div`\n  width: 50%;\n\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`\n\nconst Right = styled.div`\n  width: 50%;\n  justify-content: center;\n`\n\nconst PPTEditor = ({ setData }) => {\n  const [file, setFile] = useState(null)\n  const [boxes, setBoxes] = useState([])\n  const imagePreviewEl = useRef(null)\n\n  const handleChange = (e) => {\n    setFile(URL.createObjectURL(e.target.files[0]))\n  }\n\n  const handleBoxCreate = (type) => {\n    setBoxes([\n      ...boxes,\n      {\n        type,\n        left: 0,\n        top: 0,\n      },\n    ])\n  }\n\n  const handlePreview = () => {\n    setData({\n      file,\n      pptWidth: imagePreviewEl.current.offsetWidth,\n      pptHeight: imagePreviewEl.current.offsetHeight,\n      boxes,\n    })\n  }\n\n  const handlePositionSet = (index) => (left, top) => {\n    const temp = boxes\n    temp[index].left = left\n    temp[index].top = top\n    setBoxes(temp)\n  }\n\n  return (\n    <Root>\n      <Root>\n        <Left>\n          <input type=\"file\" onChange={handleChange} />\n          <button onClick={() => handleBoxCreate('INPUT_NUMBER')}>\n            create input number widget\n          </button>\n          <button onClick={() => handleBoxCreate('EXPRESSION')}>\n            create expression widget\n          </button>\n          <button onClick={() => handleBoxCreate('DROPDOWN')}>\n            create dropdown widget\n          </button>\n          <button onClick={() => handleBoxCreate('NUMBERIC_INPUT')}>\n            create numberic input widget\n          </button>\n          <button onClick={handlePreview}>Preview</button>\n        </Left>\n        <Right>\n          <div\n            ref={imagePreviewEl}\n            style={{\n              position: 'relative',\n              maxWidth: '800px',\n              minWidth: '400px',\n            }}\n          >\n            <img alt={'preview'} src={file} style={{ width: '100%' }} />\n            {boxes.map(function generateWidget(box, index) {\n              const { type } = box\n              switch (type) {\n                case 'INPUT_NUMBER':\n                  return (\n                    <Draggable\n                      key={`draggable-input-${index}`}\n                      relativeEl={imagePreviewEl}\n                      onPositionSet={handlePositionSet(index)}\n                    >\n                      <input />\n                    </Draggable>\n                  )\n                case 'EXPRESSION':\n                  return null\n                case 'DROPDOWN':\n                  return null\n                case 'NUMBERIC_INPUT':\n                  return null\n                default:\n                  return null\n              }\n            })}\n          </div>\n        </Right>\n      </Root>\n    </Root>\n  )\n}\n\nexport default PPTEditor\n","import React, { useState, useRef } from 'react'\nimport styled from 'styled-components'\n\nconst Position = styled.div`\n  position: absolute;\n\n  left: ${(props) => props.left}%;\n  top: ${(props) => props.top}%;\n`\n\nconst PPTViewer = ({ data }) => {\n  const { file, pptWidth, pptHeight, boxes } = data\n  const el = useRef(null)\n\n  if (el.current) {\n    console.log(el.current.offsetWidth, el.current.offsetHeight)\n  }\n\n  return (\n    <div ref={el} style={{ position: 'relative' }}>\n      <img alt={'preview'} src={file} style={{ width: '100%' }} />\n      {el.current &&\n        boxes.map(function generateWidget(box, index) {\n          console.log(boxes, pptHeight, pptWidth)\n          const { type, left, top } = box\n          const leftRelative = (100 * left) / pptWidth\n          const topRelative = (100 * top) / pptHeight\n          switch (type) {\n            case 'INPUT_NUMBER':\n              return (\n                <Position left={leftRelative} top={topRelative}>\n                  <input />\n                </Position>\n              )\n            case 'EXPRESSION':\n              return null\n            case 'DROPDOWN':\n              return null\n            case 'NUMBERIC_INPUT':\n              return null\n            default:\n              return null\n          }\n        })}\n    </div>\n  )\n}\n\nexport default PPTViewer\n","import React, { useState } from 'react'\n\nimport PPTEditor from './components/PPTEditor'\nimport PPTViewer from './components/PPTViewer'\n\nfunction App() {\n  const [data, setData] = useState({ boxes: [] })\n  return (\n    <div>\n      <PPTEditor setData={setData} />\n      <div style={{ marginBottom: '100px' }} />\n      <PPTViewer data={data} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}